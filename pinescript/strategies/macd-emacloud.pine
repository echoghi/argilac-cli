//@version=5
strategy("EMA Cloud + MACD", overlay=true, currency=currency.NONE, initial_capital = 3000, default_qty_type = strategy.percent_of_equity, default_qty_value = 50)
slow = input(200, title="Slow EMA")
fast = input(20, title="Fast EMA")

//ema definitions
emaSlow = ta.ema(close, slow)
emaFast = ta.ema(close, fast)

//Color definition for Moving Averages
col = emaFast > emaSlow ? color.lime : emaFast < emaSlow ? color.red : color.yellow
//Moving Average Plots and Fill
p1 = plot(emaSlow, title="Slow MA", style=plot.style_linebr, linewidth=4, color=col)
p2 = plot(emaFast, title="Fast MA", style=plot.style_linebr, linewidth=2, color=col)
fill(p1, p2, color.new(#FFCDD2, 70))
plotshape(ta.crossover(emaFast, emaSlow), style=shape.triangleup, size=size.tiny, color=color.green, text="Buy", title="Buy", location=location.belowbar)
plotshape(ta.crossover(emaSlow, emaFast), style=shape.triangledown, size=size.tiny, color=color.red, text="Sell", title="Sell")

// Getting inputs
fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
src = input(title="Source", defval=close)
signal_length = input.int(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input.string(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input.string(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])
// Plot colors
col_macd = input(#2962FF, "MACD Line  ", group="Color Settings", inline="MACD")
col_signal = input(#FF6D00, "Signal Line  ", group="Color Settings", inline="Signal")
col_grow_above = input(#26A69A, "Above   Grow", group="Histogram", inline="Above")
col_fall_above = input(#B2DFDB, "Fall", group="Histogram", inline="Above")
col_grow_below = input(#FFCDD2, "Below Grow", group="Histogram", inline="Below")
col_fall_below = input(#FF5252, "Fall", group="Histogram", inline="Below")
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(src, fast_length) : ta.ema(src, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(src, slow_length) : ta.ema(src, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal
// hline(0, "Zero Line", color=color.new(#787B86, 50))
//plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
// plot(macd, title="MACD", color=col_macd)
// plot(signal, title="Signal", color=col_signal)

// Long entry condition: Candle closes above the upper ema band and the macd is greater than the signal and below the zero line
long_entry = ta.crossover(close, emaFast) and low[0] > emaSlow and hist < 0 and ta.crossover(macd, signal)

// Short entry condition: Candle closes below the lower ema band and the macd is less than the signal and below the zero line
short_entry = ta.crossunder(close, emaSlow) and high[0] < emaFast and hist > 0 and ta.crossunder(macd, signal)

// Exit conditions
long_take_profit = strategy.position_avg_price * 1.5
short_take_profit = strategy.position_avg_price * 0.5
long_stop_loss = strategy.position_avg_price * 0.75
short_stop_loss = strategy.position_avg_price * 1.25
exit_long = long_stop_loss or long_take_profit
exit_short = short_stop_loss or short_take_profit

plotshape(long_entry ? low : na, 'Buy', shape.labelup, location.belowbar, color=#3AFF17, size=size.small, offset=0)
plotshape(short_entry ? high : na, 'Sell', shape.labeldown, location.abovebar,color=#FD1707, size=size.small, offset=0)
plotshape(exit_long ? high : na, 'StopBuy', shape.xcross, location.absolute, color=#3AFF17, size=size.tiny, offset=0)
plotshape(exit_short ? low : na, 'StopSell', shape.xcross, location.absolute, color=#FD1707, size=size.tiny, offset=0)

// Strategy entries and exits
if (long_entry)
    strategy.entry("Long", strategy.long)
    strategy.exit("TP/SL Long", "Long", short_entry)

if (short_entry)
    strategy.entry("Short", strategy.short)
    strategy.exit("TP/SL Short", "Short", long_entry)
    
if(exit_long)
    strategy.close("Long")

if(exit_short)
    strategy.close("Short")